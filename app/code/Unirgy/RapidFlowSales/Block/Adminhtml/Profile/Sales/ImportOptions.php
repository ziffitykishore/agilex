<?php

/**
 * Unirgy LLC
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the EULA
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.unirgy.com/LICENSE-M1.txt
 *
 * @category   Unirgy
 * @package    Unirgy_RapidFlow
 * @copyright  Copyright (c) 2008-2009 Unirgy LLC (http://www.unirgy.com)
 * @license    http:///www.unirgy.com/LICENSE-M1.txt
 */

namespace Unirgy\RapidFlowSales\Block\Adminhtml\Profile\Sales;

use Magento\Backend\Block\Template\Context;
use Magento\Backend\Block\Widget\Form\Element\Dependence;
use Magento\Backend\Block\Widget\Form\Generic;
use Magento\Framework\Data\FormFactory;
use Magento\Framework\Registry;
use Magento\Framework\View\LayoutFactory;
use Unirgy\RapidFlow\Model\Profile;
use Unirgy\RapidFlowSales\Model\Profile\Sales;
use Unirgy\RapidFlowSales\Model\Source;

class ImportOptions
    extends Generic
{
    /**
     * @var Source
     */
    protected $_modelSource;

    /**
     * @var LayoutFactory
     */
    protected $_viewLayoutFactory;

    public function __construct(
        Context $context,
        Registry $registry,
        FormFactory $formFactory,
        Source $modelSource,
        LayoutFactory $viewLayoutFactory,
        array $data = []
    )
    {
        $this->_modelSource       = $modelSource;
        $this->_viewLayoutFactory = $viewLayoutFactory;

        parent::__construct($context, $registry, $formFactory, $data);
    }

    public function _prepareForm()
    {
        /** @var Source $source */
        $source = $this->_modelSource;

        /** @var Profile $profile */
        $profile = $this->_coreRegistry->registry('profile_data');

        $form = $this->_formFactory->create();
        $this->setForm($form);

        $fieldset = $form->addFieldset('import_options_form', ['legend' => __('Import Options')]);

        $fieldset->addField('store_ids',
            'multiselect',
            [
                'label'  => __('Limit Stores to Import'),
                'name'   => 'options[store_ids]',
                'values' => $source->setPath('stores')->toOptionArray(),
                'value'  => $profile->getData(Sales::OPTIONS_IMPORT_STORE_IDS),
                'note'   => __('wherever applicable'),
            ]);

        $fieldset->addField('import_row_types',
            'multiselect',
            [
                'label'  => __('Limit Row Types to Import'),
                'name'   => 'options[row_types]',
                'values' => $source->setPath(Source::SALES_ROW_TYPE)->toOptionArray(),
                'value'  => $profile->getData(Sales::OPTIONS_ROW_TYPES_CONFIG_PATH),
            ]);

        $missingValuesFieldset = $form->addFieldset('import_missing_values_form',
            ['legend' => __('Actions on Missing Values')]);

        /*
         * When urf_id is missing in imported data, it has to be generated.
         * It will be generated using Uuid::v5(urf_id_prefix, sales_type . ':' .  entity_id)
         * Once data is imported without prefix, it should be imported same way in the future, or use the autogenerated
         * urf_id from the import
         */
        $missingValuesFieldset->addField('urf_id_prefix',
            'text',
            [
                'label' => __('When `urf_id` is Missing'),
                'name'  => 'options[import][urf_id_prefix]',
                'value' => $profile->getData(Sales::OPTIONS_IMPORT_URF_ID_PREFIX),
                'note'  => __('Prefix used to generate UUID for imported data.<br/>' .
                              'If data is missing values for <strong>urf_id</strong> field, such values will be created on the fly.<br/>' .
                              'If <strong>urf_id</strong> is missing, <strong>entity_id</strong> must be present in file'),
            ]);

        // what to do on missing store - throw error or import for default store
        $missingValuesFieldset->addField('missing_store',
            'select',
            [
                'label'  => __('When Store is Missing'),
                'name'   => 'options[import][missing_store]',
                'values' => $source->setPath(Source::MISSING_STORE)->toOptionArray(),
                'value'  => $profile->getData(Sales::OPTIONS_IMPORT_MISSING_STORE),
                'note'   => __('Action to take when import store does not exist in this site.'),
            ]);

        // what to do on missing customer - throw error or create new user just from email
        $missingCustomerField     = $missingValuesFieldset->addField('missing_customer',
            'select',
            [
                'label'  => __('When Customer is Missing'),
                'name'   => 'options[import][missing_customer]',
                'values' => $source->setPath(Source::MISSING_CUSTOMER)->toOptionArray(),
                'value'  => $profile->getData(Sales::OPTIONS_IMPORT_MISSING_CUSTOMER),
                'note'   => __('Action to take when import customer does not exist in this site.'),
            ]);
        $missingCustomerFieldName = $missingCustomerField->getName();
        $dependenceBlock          = $this->getDependenceBlock();

        $dependenceBlock->addFieldMap($missingCustomerField->getHtmlId(), $missingCustomerFieldName);

        // add dependency fields for each sales type option to select import/export columns
        $el = $missingValuesFieldset->addField('failed_create_customer',
            'select',
            [
                'label'  => __('If customer create fails'), // it is already translated
                'name'   => 'options[import][failed_create_customer]',
                'values' => $source->setPath(Source::FAILED_CUSTOMER)
                                   ->toOptionArray(),
                'value'  => $profile->getData(Sales::OPTIONS_FAILED_CREATE_CUSTOMER),
                'note'   => __('<strong>Create customer</strong> option is valid only for Sales Order records.')
            ]);

        $dependenceBlock->addFieldMap($el->getHtmlId(), $el->getName())
                        ->addFieldDependence($el->getName(),
                            $missingCustomerFieldName,
                            Source::ACTION_CREATE);

        $this->addChild('form_after', $dependenceBlock);

        return parent::_prepareForm();
    }

    /**
     * @return \Magento\Backend\Block\Widget\Form\Element\Dependence
     * @throws \InvalidArgumentException
     */
    protected function getDependenceBlock()
    {
        return $this->_viewLayoutFactory->create()->createBlock(Dependence::class);
    }
}
