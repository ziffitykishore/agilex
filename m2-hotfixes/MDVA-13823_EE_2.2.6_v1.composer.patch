diff --git a/vendor/magento/module-catalog/Helper/Data.php b/vendor/magento/module-catalog/Helper/Data.php
index 7d153399f8e..495973176be 100644
--- a/vendor/magento/module-catalog/Helper/Data.php
+++ b/vendor/magento/module-catalog/Helper/Data.php
@@ -7,6 +7,7 @@ namespace Magento\Catalog\Helper;
 
 use Magento\Catalog\Api\CategoryRepositoryInterface;
 use Magento\Catalog\Api\ProductRepositoryInterface;
+use Magento\Store\Model\ScopeInterface;
 use Magento\Customer\Model\Session as CustomerSession;
 use Magento\Framework\Exception\NoSuchEntityException;
 use Magento\Framework\Pricing\PriceCurrencyInterface;
@@ -269,7 +270,8 @@ class Data extends \Magento\Framework\App\Helper\AbstractHelper
 
     /**
      * Return current category path or get it from current category
-     * and creating array of categories|product paths for breadcrumbs
+     *
+     * Creating array of categories|product paths for breadcrumbs
      *
      * @return array
      */
@@ -378,6 +380,7 @@ class Data extends \Magento\Framework\App\Helper\AbstractHelper
 
     /**
      * Split SKU of an item by dashes and spaces
+     *
      * Words will not be broken, unless this length is greater than $length
      *
      * @param string $sku
@@ -406,14 +409,15 @@ class Data extends \Magento\Framework\App\Helper\AbstractHelper
     /**
      * Retrieve Catalog Price Scope
      *
-     * @return int
+     * @return int|null
      */
     public function getPriceScope()
     {
-        return $this->scopeConfig->getValue(
+        $priceScope = $this->scopeConfig->getValue(
             self::XML_PATH_PRICE_SCOPE,
-            \Magento\Store\Model\ScopeInterface::SCOPE_STORE
+            ScopeInterface::SCOPE_STORE
         );
+        return isset($priceScope) ? (int)$priceScope : null;
     }
 
     /**
@@ -449,7 +453,7 @@ class Data extends \Magento\Framework\App\Helper\AbstractHelper
     {
         return $this->scopeConfig->isSetFlag(
             self::CONFIG_PARSE_URL_DIRECTIVES,
-            \Magento\Store\Model\ScopeInterface::SCOPE_STORE,
+            ScopeInterface::SCOPE_STORE,
             $this->_storeId
         );
     }
@@ -466,6 +470,7 @@ class Data extends \Magento\Framework\App\Helper\AbstractHelper
 
     /**
      * Whether to display items count for each filter option
+     *
      * @param int $storeId Store view ID
      * @return bool
      */
@@ -473,12 +478,14 @@ class Data extends \Magento\Framework\App\Helper\AbstractHelper
     {
         return $this->scopeConfig->isSetFlag(
             self::XML_PATH_DISPLAY_PRODUCT_COUNT,
-            \Magento\Store\Model\ScopeInterface::SCOPE_STORE,
+            ScopeInterface::SCOPE_STORE,
             $storeId
         );
     }
 
     /**
+     * Convert tax address array to address data object with country id and postcode
+     *
      * @param array $taxAddress
      * @return \Magento\Customer\Api\Data\AddressInterface|null
      */
diff --git a/vendor/magento/module-catalog/Model/Product/Attribute/Backend/TierPrice/UpdateHandler.php b/vendor/magento/module-catalog/Model/Product/Attribute/Backend/TierPrice/UpdateHandler.php
index b23dc6f30f8..9b9b007245b 100644
--- a/vendor/magento/module-catalog/Model/Product/Attribute/Backend/TierPrice/UpdateHandler.php
+++ b/vendor/magento/module-catalog/Model/Product/Attribute/Backend/TierPrice/UpdateHandler.php
@@ -82,14 +82,14 @@ class UpdateHandler implements ExtensionInterface
                     __('Tier prices data should be array, but actually other type is received')
                 );
             }
-            $websiteId = $this->storeManager->getStore($entity->getStoreId())->getWebsiteId();
+            $websiteId = (int)$this->storeManager->getStore($entity->getStoreId())->getWebsiteId();
             $isGlobal = $attribute->isScopeGlobal() || $websiteId === 0;
             $identifierField = $this->metadataPoll->getMetadata(ProductInterface::class)->getLinkField();
-            $productId = $entity->getData($identifierField);
+            $productId = (int)$entity->getData($identifierField);
 
             // prepare original data to compare
             $origPrices = $entity->getOrigData($attribute->getName());
-            $old = $this->prepareOriginalDataToCompare($origPrices, $isGlobal);
+            $old = $this->prepareOldTierPriceToCompare($origPrices);
             // prepare data for save
             $new = $this->prepareNewDataForSave($priceRows, $isGlobal);
 
@@ -262,19 +262,18 @@ class UpdateHandler implements ExtensionInterface
     }
 
     /**
+     * Prepare old data to compare.
+     *
      * @param array|null $origPrices
-     * @param bool $isGlobal
      * @return array
      */
-    private function prepareOriginalDataToCompare($origPrices, $isGlobal = true): array
+    private function prepareOldTierPriceToCompare($origPrices): array
     {
         $old = [];
         if (is_array($origPrices)) {
             foreach ($origPrices as $data) {
-                if ($isGlobal === $this->isWebsiteGlobal((int)$data['website_id'])) {
-                    $key = $this->getPriceKey($data);
-                    $old[$key] = $data;
-                }
+                $key = $this->getPriceKey($data);
+                $old[$key] = $data;
             }
         }
 
