diff --git a/vendor/magento/module-customer/Model/Delegation/Storage.php b/vendor/magento/module-customer/Model/Delegation/Storage.php
index 71a61d59057..d1eae3f5600 100644
--- a/vendor/magento/module-customer/Model/Delegation/Storage.php
+++ b/vendor/magento/module-customer/Model/Delegation/Storage.php
@@ -19,6 +19,7 @@ use Magento\Customer\Model\Session\Proxy as SessionProxy;
 use Magento\Customer\Model\Delegation\Data\NewOperationFactory;
 use Magento\Customer\Api\Data\CustomerInterfaceFactory;
 use Magento\Customer\Api\Data\AddressInterfaceFactory;
+use Magento\Framework\Api\CustomAttributesDataInterface;
 use Psr\Log\LoggerInterface;
 
 /**
@@ -100,11 +101,13 @@ class Storage
             }
         }
         $this->session->setCustomerFormData($customerData);
-        $this->session->setDelegatedNewCustomerData([
-            'customer' => $customerData,
-            'addresses' => $addressesData,
-            'delegated_data' => $delegatedData,
-        ]);
+        $this->session->setDelegatedNewCustomerData(
+            [
+                'customer' => $customerData,
+                'addresses' => $addressesData,
+                'delegated_data' => $delegatedData,
+            ]
+        );
     }
 
     /**
@@ -134,18 +137,31 @@ class Storage
                 );
                 $addressData['region'] = $region;
             }
-            $addresses[] = $this->addressFactory->create(
+
+            $customAttributes = [];
+            if (!empty($addressData[CustomAttributesDataInterface::CUSTOM_ATTRIBUTES])) {
+                $customAttributes = $addressData[CustomAttributesDataInterface::CUSTOM_ATTRIBUTES];
+                unset($addressData[CustomAttributesDataInterface::CUSTOM_ATTRIBUTES]);
+            }
+
+            $address = $this->addressFactory->create(
                 ['data' => $addressData]
             );
+
+            foreach ($customAttributes as $attributeCode => $attributeValue) {
+                $address->setCustomAttribute($attributeCode, $attributeValue);
+            }
+
+            $addresses[] = $address;
         }
         $customerData = $serialized['customer'];
         $customerData['addresses'] = $addresses;
 
-        return $this->newFactory->create([
-            'customer' => $this->customerFactory->create(
-                ['data' => $customerData]
-            ),
-            'additionalData' => $serialized['delegated_data'],
-        ]);
+        return $this->newFactory->create(
+            [
+                'customer' => $this->customerFactory->create(['data' => $customerData]),
+                'additionalData' => $serialized['delegated_data'],
+            ]
+        );
     }
 }
diff --git a/vendor/magento/module-customer-custom-attributes/Model/Plugin/AddCustomAttributesToCustomerAddress.php b/vendor/magento/module-customer-custom-attributes/Model/Plugin/AddCustomAttributesToCustomerAddress.php
index dde3634bfe8..b61fd6582e8 100644
--- a/vendor/magento/module-customer-custom-attributes/Model/Plugin/AddCustomAttributesToCustomerAddress.php
+++ b/vendor/magento/module-customer-custom-attributes/Model/Plugin/AddCustomAttributesToCustomerAddress.php
@@ -3,11 +3,13 @@
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-
 declare(strict_types=1);
 
 namespace Magento\CustomerCustomAttributes\Model\Plugin;
 
+use Magento\Customer\Api\Data\AddressInterface;
+use Magento\Customer\Model\Address;
+use Magento\CustomerCustomAttributes\Helper\Data as Helper;
 use Magento\Framework\Api\AttributeInterface;
 
 /**
@@ -16,36 +18,39 @@ use Magento\Framework\Api\AttributeInterface;
 class AddCustomAttributesToCustomerAddress
 {
     /**
-     * @var \Magento\CustomerCustomAttributes\Helper\Data
+     * @var Helper
      */
     private $customerData;
 
     /**
-     * @param \Magento\CustomerCustomAttributes\Helper\Data $customerData
+     * @param Helper $customerData
      */
     public function __construct(
-        \Magento\CustomerCustomAttributes\Helper\Data $customerData
+        Helper $customerData
     ) {
         $this->customerData = $customerData;
     }
 
     /**
-     * @param \Magento\Customer\Model\Address $subject
-     * @param \Magento\Customer\Api\Data\AddressInterface $customerAddress
+     * Set custom attribute interface values for custom attributes
+     *
+     * @param Address $subject
+     * @param AddressInterface $customerAddress
      * @return array
      * @SuppressWarnings(PHPMD.UnusedFormalParameter)
      */
     public function beforeUpdateData(
-        \Magento\Customer\Model\Address $subject,
-        \Magento\Customer\Api\Data\AddressInterface $customerAddress
+        Address $subject,
+        AddressInterface $customerAddress
     ) : array {
         $attributes = $this->customerData->getCustomerAddressUserDefinedAttributeCodes();
         $values = $customerAddress->getCustomAttributes();
         foreach ($attributes as $attribute) {
-            if (!empty($values[$attribute]) && !($values[$attribute] instanceof AttributeInterface)) {
+            if (array_key_exists($attribute, $values) && !($values[$attribute] instanceof AttributeInterface)) {
                 $customerAddress->setCustomAttribute($attribute, $values[$attribute]);
             }
         }
+
         return [$customerAddress];
     }
 }
