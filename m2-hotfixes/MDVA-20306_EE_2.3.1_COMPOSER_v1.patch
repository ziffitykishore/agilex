diff --git a/vendor/magento/module-checkout/view/frontend/web/js/model/billing-address-postcode-validator.js b/vendor/magento/module-checkout/view/frontend/web/js/model/billing-address-postcode-validator.js
new file mode 100644
index 00000000000..b101b67d26b
--- /dev/null
+++ b/vendor/magento/module-checkout/view/frontend/web/js/model/billing-address-postcode-validator.js
@@ -0,0 +1,82 @@
+/**
+ * Copyright Â© Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+
+define([
+           'jquery',
+           'Magento_Checkout/js/model/postcode-validator',
+           'mage/translate',
+           'uiRegistry'
+       ], function (
+    $,
+    postcodeValidator,
+    $t,
+    uiRegistry
+) {
+    'use strict';
+
+    var postcodeElementName = 'postcode';
+
+    return {
+        validateZipCodeTimeout: 0,
+        validateDelay: 2000,
+
+        /**
+         * Perform postponed binding for fieldset elements
+         *
+         * @param {String} formPath
+         */
+        initFields: function (formPath) {
+            var self = this;
+
+            uiRegistry.async(formPath + '.' + postcodeElementName)(self.bindHandler.bind(self));
+        },
+
+        /**
+         * @param {Object} element
+         * @param {Number} delay
+         */
+        bindHandler: function (element, delay) {
+            var self = this;
+
+            delay = typeof delay === 'undefined' ? self.validateDelay : delay;
+
+            element.on('value', function () {
+                clearTimeout(self.validateZipCodeTimeout);
+                self.validateZipCodeTimeout = setTimeout(function () {
+                    self.postcodeValidation(element);
+                }, delay);
+            });
+        },
+
+        /**
+         * @param {Object} postcodeElement
+         * @return {*}
+         */
+        postcodeValidation: function (postcodeElement) {
+            var countryId = $('select[name="country_id"]:visible').val(),
+                validationResult,
+                warnMessage;
+
+            if (postcodeElement == null || postcodeElement.value() == null) {
+                return true;
+            }
+
+            postcodeElement.warn(null);
+            validationResult = postcodeValidator.validate(postcodeElement.value(), countryId);
+
+            if (!validationResult) {
+                warnMessage = $t('Provided Zip/Postal Code seems to be invalid.');
+
+                if (postcodeValidator.validatedPostCodeExample.length) {
+                    warnMessage += $t(' Example: ') + postcodeValidator.validatedPostCodeExample.join('; ') + '. ';
+                }
+                warnMessage += $t('If you believe it is the right one you can ignore this notice.');
+                postcodeElement.warn(warnMessage);
+            }
+
+            return validationResult;
+        }
+    };
+});
diff --git a/vendor/magento/module-checkout/view/frontend/web/js/view/billing-address.js b/vendor/magento/module-checkout/view/frontend/web/js/view/billing-address.js
index 6f9a1a46826..f5d397e3c34 100644
--- a/vendor/magento/module-checkout/view/frontend/web/js/view/billing-address.js
+++ b/vendor/magento/module-checkout/view/frontend/web/js/view/billing-address.js
@@ -18,7 +18,7 @@ define([
     'Magento_Checkout/js/action/set-billing-address',
     'Magento_Ui/js/model/messageList',
     'mage/translate',
-    'Magento_Checkout/js/model/shipping-rates-validator'
+    'Magento_Checkout/js/model/billing-address-postcode-validator'
 ],
 function (
     ko,
@@ -35,7 +35,7 @@ function (
     setBillingAddressAction,
     globalMessageList,
     $t,
-    shippingRatesValidator
+    billingAddressPostcodeValidator
 ) {
     'use strict';
 
@@ -73,7 +73,7 @@ function (
             quote.paymentMethod.subscribe(function () {
                 checkoutDataResolver.resolveBillingAddress();
             }, this);
-            shippingRatesValidator.initFields(this.get('name') + '.form-fields');
+            billingAddressPostcodeValidator.initFields(this.get('name') + '.form-fields');
         },
 
         /**
