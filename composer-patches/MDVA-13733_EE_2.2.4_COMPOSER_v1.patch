diff --git a/vendor/magento/module-elasticsearch/Elasticsearch5/Model/Client/Elasticsearch.php b/vendor/magento/module-elasticsearch/Elasticsearch5/Model/Client/Elasticsearch.php
index e260447173e..931dbcad595 100644
--- a/vendor/magento/module-elasticsearch/Elasticsearch5/Model/Client/Elasticsearch.php
+++ b/vendor/magento/module-elasticsearch/Elasticsearch5/Model/Client/Elasticsearch.php
@@ -243,6 +243,7 @@ class Elasticsearch implements ClientInterface
                                 'match_mapping_type' => 'string',
                                 'mapping' => [
                                     'type' => 'float',
+                                    'store' => true,
                                 ],
                             ],
                         ],
diff --git a/vendor/magento/module-elasticsearch/Elasticsearch5/SearchAdapter/Aggregation/Interval.php b/vendor/magento/module-elasticsearch/Elasticsearch5/SearchAdapter/Aggregation/Interval.php
new file mode 100644
index 00000000000..0e9ccdddcb7
--- /dev/null
+++ b/vendor/magento/module-elasticsearch/Elasticsearch5/SearchAdapter/Aggregation/Interval.php
@@ -0,0 +1,287 @@
+<?php
+/**
+ * Copyright Â© Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+namespace Magento\Elasticsearch\Elasticsearch5\SearchAdapter\Aggregation;
+
+use Magento\Framework\Search\Dynamic\IntervalInterface;
+use Magento\Elasticsearch\SearchAdapter\ConnectionManager;
+use Magento\Elasticsearch\Model\Adapter\FieldMapperInterface;
+use Magento\Elasticsearch\Model\Config;
+use Magento\Elasticsearch\SearchAdapter\SearchIndexNameResolver;
+use Magento\CatalogSearch\Model\Indexer\Fulltext;
+
+class Interval implements IntervalInterface
+{
+    /**
+     * Minimal possible value
+     */
+    const DELTA = 0.005;
+
+    /**
+     * @var ConnectionManager
+     */
+    protected $connectionManager;
+
+    /**
+     * @var FieldMapperInterface
+     */
+    protected $fieldMapper;
+
+    /**
+     * @var Config
+     */
+    protected $clientConfig;
+
+    /**
+     * @var string
+     */
+    private $fieldName;
+
+    /**
+     * @var string
+     */
+    private $storeId;
+
+    /**
+     * @var array
+     */
+    private $entityIds;
+
+    /**
+     * @var SearchIndexNameResolver
+     */
+    private $searchIndexNameResolver;
+
+    /**
+     * @param ConnectionManager $connectionManager
+     * @param FieldMapperInterface $fieldMapper
+     * @param Config $clientConfig
+     * @param SearchIndexNameResolver $searchIndexNameResolver
+     * @param string $fieldName
+     * @param string $storeId
+     * @param array $entityIds
+     */
+    public function __construct(
+        ConnectionManager $connectionManager,
+        FieldMapperInterface $fieldMapper,
+        Config $clientConfig,
+        SearchIndexNameResolver $searchIndexNameResolver,
+        $fieldName,
+        $storeId,
+        $entityIds
+    ) {
+        $this->connectionManager = $connectionManager;
+        $this->fieldMapper = $fieldMapper;
+        $this->clientConfig = $clientConfig;
+        $this->fieldName = $fieldName;
+        $this->storeId = $storeId;
+        $this->entityIds = $entityIds;
+        $this->searchIndexNameResolver = $searchIndexNameResolver;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function load($limit, $offset = null, $lower = null, $upper = null)
+    {
+        $from = $to = [];
+        if ($lower) {
+            $from = ['gte' => $lower - self::DELTA];
+        }
+        if ($upper) {
+            $to = ['lt' => $upper - self::DELTA];
+        }
+
+        $requestQuery = [
+            'index' => $this->searchIndexNameResolver->getIndexName($this->storeId, Fulltext::INDEXER_ID),
+            'type' => $this->clientConfig->getEntityType(),
+            'body' => [
+                '_source' => [
+                    '_id',
+                    $this->fieldName,
+                ],
+                'query' => [
+                    'bool' => [
+                        'must' => [
+                            'match_all' => (object)[],
+                        ],
+                        'filter' => [
+                            'bool' => [
+                                'must' => [
+                                    [
+                                        'terms' => [
+                                            '_id' => $this->entityIds,
+                                        ],
+                                    ],
+                                    [
+                                        'range' => [
+                                            $this->fieldName => array_merge($from, $to),
+                                        ],
+                                    ],
+                                ],
+                            ],
+                        ],
+                    ],
+                ],
+                'sort' => [
+                    $this->fieldName,
+                ],
+                'size' => $limit,
+            ],
+        ];
+        if ($offset) {
+            $requestQuery['body']['from'] = $offset;
+        }
+        $queryResult = $this->connectionManager->getConnection()
+            ->query($requestQuery);
+
+        return $this->arrayValuesToFloat($queryResult['hits']['hits'], $this->fieldName);
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function loadPrevious($data, $index, $lower = null)
+    {
+        if ($lower) {
+            $from = ['gte' => $lower - self::DELTA];
+        }
+        if ($data) {
+            $to = ['lt' => $data - self::DELTA];
+        }
+
+        $requestQuery = [
+            'index' => $this->searchIndexNameResolver->getIndexName($this->storeId, Fulltext::INDEXER_ID),
+            'type' => $this->clientConfig->getEntityType(),
+            'search_type' => 'count',
+            'body' => [
+                '_source' => [
+                    '_id'
+                ],
+                'query' => [
+                    'bool' => [
+                        'must' => [
+                            'match_all' => (object)[],
+                        ],
+                        'filter' => [
+                            'bool' => [
+                                'must' => [
+                                    [
+                                        'terms' => [
+                                            '_id' => $this->entityIds,
+                                        ],
+                                    ],
+                                    [
+                                        'range' => [
+                                            $this->fieldName => array_merge($from, $to),
+                                        ],
+                                    ],
+                                ],
+                            ],
+                        ],
+                    ],
+                ],
+                'sort' => [
+                    $this->fieldName,
+                ],
+            ],
+        ];
+        $queryResult = $this->connectionManager->getConnection()
+            ->query($requestQuery);
+
+        $offset = $queryResult['hits']['total'];
+        if (!$offset) {
+            return false;
+        }
+
+        return $this->load($index - $offset + 1, $offset - 1, $lower);
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function loadNext($data, $rightIndex, $upper = null)
+    {
+        $from = ['gt' => $data + self::DELTA];
+        $to = ['lt' => $data - self::DELTA];
+
+        $requestCountQuery = [
+            'index' => $this->searchIndexNameResolver->getIndexName($this->storeId, Fulltext::INDEXER_ID),
+            'type' => $this->clientConfig->getEntityType(),
+            'search_type' => 'count',
+            'body' => [
+                '_source' => [
+                    '_id'
+                ],
+                'query' => [
+                    'bool' => [
+                        'must' => [
+                            'match_all' => (object)[],
+                        ],
+                        'filter' => [
+                            'bool' => [
+                                'must' => [
+                                    [
+                                        'terms' => [
+                                            '_id' => $this->entityIds,
+                                        ],
+                                    ],
+                                    [
+                                        'range' => [
+                                            $this->fieldName => array_merge($from, $to),
+                                        ],
+                                    ],
+                                ],
+                            ],
+                        ],
+                    ],
+                ],
+                'sort' => [
+                    $this->fieldName,
+                ],
+            ],
+        ];
+        $queryCountResult = $this->connectionManager->getConnection()
+            ->query($requestCountQuery);
+
+        $offset = $queryCountResult['hits']['total'];
+        if (!$offset) {
+            return false;
+        }
+
+        $from = ['gte' => $data - self::DELTA];
+        if ($upper !== null) {
+            $to = ['lt' => $data - self::DELTA];
+        }
+
+        $requestQuery = $requestCountQuery;
+        $requestCountQuery['body']['query']['filtered']['filter']['bool']['must']['range'] =
+            [$this->fieldName => array_merge($from, $to)];
+
+        $requestCountQuery['body']['from'] = $offset - 1;
+        $requestCountQuery['body']['size'] = $rightIndex - $offset + 1;
+
+        $queryResult = $this->connectionManager->getConnection()
+            ->query($requestQuery);
+
+        return array_reverse($this->arrayValuesToFloat($queryResult['hits']['hits'], $this->fieldName));
+    }
+
+    /**
+     * @param array $hits
+     * @param string $fieldName
+     *
+     * @return float[]
+     */
+    private function arrayValuesToFloat($hits, $fieldName)
+    {
+        $returnPrices = [];
+        foreach ($hits as $hit) {
+            $returnPrices[] = (float) $hit['_source'][$fieldName][0];
+        }
+
+        return $returnPrices;
+    }
+}
diff --git a/vendor/magento/module-elasticsearch/etc/di.xml b/vendor/magento/module-elasticsearch/etc/di.xml
index 63f795b26f5..f4f25d277a0 100644
--- a/vendor/magento/module-elasticsearch/etc/di.xml
+++ b/vendor/magento/module-elasticsearch/etc/di.xml
@@ -158,7 +158,7 @@
         <arguments>
             <argument name="intervals" xsi:type="array">
                 <item name="elasticsearch" xsi:type="string">Magento\Elasticsearch\SearchAdapter\Aggregation\Interval</item>
-                <item name="elasticsearch5" xsi:type="string">Magento\Elasticsearch\SearchAdapter\Aggregation\Interval</item>
+                <item name="elasticsearch5" xsi:type="string">Magento\Elasticsearch\Elasticsearch5\SearchAdapter\Aggregation\Interval</item>
             </argument>
         </arguments>
     </type>
